{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","Name","Employee","Original","handleIdSort","event","preventDefault","console","log","target","sortedListId","sort","employeeA","employeeB","id","value","setState","handleFirstNameSort","sortedList","name","first","handleLastNameSort","sortedListLast","last","handleEmailSort","sortedListEmail","email","handleInputChange","filteredList","filter","employee","toLowerCase","indexOf","axios","get","then","results","data","this","class","className","onChange","type","placeholder","Table","striped","bordered","hover","href","onClick","map","emp","index","key","src","picture","thumbnail","alt","cell","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61bf5339.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { Table } from \"react-bootstrap\";\n\nclass App extends Component {\n  // Setting the component's initial state\n  state = {\n    Name: \"\",\n    Employee: [],\n    Original: [],\n  };\n\n// this function loads 200 face user profiles once the component mounts\n  componentDidMount() {\n    axios\n      .get(\"https://randomuser.me/api/?results=200&nat=us\")\n      .then((results) => {\n        this.setState({\n          Employee: results.data.results,\n          // saving the original list so we can revert to it after a filter\n          Original: results.data.results,\n        });\n        // console.log(results);\n      });\n  }\n\n\n  // the sorting function by emplyee ID\n  handleIdSort = (event) => {\n    event.preventDefault();\n    console.log(event.target);\n    let sortedListId = [...this.state.Employee];\n    sortedListId = sortedListId.sort((employeeA, employeeB) => {\n      if (employeeA.id.value > employeeB.id.value) {\n        return 1;\n      }\n      return -1;\n    });\n    this.setState({\n      Employee: sortedListId,\n    });\n  };\n// sorting function by first name\n  handleFirstNameSort = (event) => {\n    event.preventDefault();\n    console.log(event.target);\n    let sortedList = [...this.state.Employee];\n    sortedList = sortedList.sort((employeeA, employeeB) => {\n      if (employeeA.name.first > employeeB.name.first) {\n        return 1;\n      }\n      return -1;\n    });\n    this.setState({\n      Employee: sortedList,\n    });\n  };\n// sorting by last name\n  handleLastNameSort = (event) => {\n    event.preventDefault();\n    console.log(event.target);\n    let sortedListLast = [...this.state.Employee];\n    sortedListLast = sortedListLast.sort((employeeA, employeeB) => {\n      if (employeeA.name.last > employeeB.name.last) {\n        return 1;\n      }\n      return -1;\n    });\n    this.setState({\n      Employee: sortedListLast,\n    });\n  };\n\n  // sorting by email\n  handleEmailSort = (event) => {\n    event.preventDefault();\n    console.log(event.target);\n    let sortedListEmail = [...this.state.Employee];\n    sortedListEmail = sortedListEmail.sort((employeeA, employeeB) => {\n      if (employeeA.email > employeeB.email) {\n        return 1;\n      }\n      return -1;\n    });\n    this.setState({\n      Employee: sortedListEmail,\n    });\n  };\n\n  // filter by the user input\n\n  handleInputChange = (event) => {\n    // Getting the value and name of the input which triggered the change   name,\n    const { value } = event.target;\n\n    console.log(event.target);\n    let filteredList = [...this.state.Original];\n    filteredList = filteredList.filter((employee) => {\n      return (\n        employee.name.first.toLowerCase().indexOf(value.toLowerCase()) >= 0\n      );\n    });\n\n    // Updating the input's state\n    this.setState({\n      Name: value,\n      Employee: filteredList,\n    });\n  };\n\n  render() {\n\n    // Notice how each input has a `value`, `name`, and `onChange` prop\n    console.log(this.state.Employee);\n    \n    return (\n      <div class=\"container\">\n      <h1> For internal use of ABC Co., please keep this data Strictly confidential!</h1>\n      <div>\n        <p>Find Employee By Name</p>\n        <form className=\"form\">\n          <input\n            value={this.state.Name}\n            name=\"Name\"\n            onChange={this.handleInputChange}\n            type=\"text\"\n            placeholder=\"Name\"\n          />\n        </form>\n\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Picture</th>\n              <th>\n                <a href=\"#3\" onClick={(event) => this.handleIdSort(event)}>\n                  Cell\n                </a>\n              </th>\n              <th>\n                <a\n                  href=\"#4\"\n                  onClick={(event) => this.handleFirstNameSort(event)}\n                >\n                  First Name\n                </a>\n              </th>\n              <th>\n                {\" \"}\n                <a\n                  href=\"#1\"\n                  onClick={(event) => this.handleLastNameSort(event)}\n                >\n                  Last Name\n                </a>\n              </th>\n              <th>\n                <a href=\"#2\" onClick={(event) => this.handleEmailSort(event)}>\n                  Email\n                </a>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.Employee.map((emp, index) => (\n              <tr key={index}>\n                <td>\n                  <img src={emp.picture.thumbnail} alt={emp.picture.thumbnail}></img>\n                </td>\n                <td>{emp.cell}</td>\n                <td>{emp.name.first}</td>\n                <td>{emp.name.last}</td>\n                <td>{emp.email}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}